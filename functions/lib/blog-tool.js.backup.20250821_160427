const functions = require('firebase-functions');
const xmlrpc = require('xmlrpc');
const { OpenAI } = require('openai');

class BlogTool {
  constructor() {
    // 環境変数から設定を取得
    this.wordpressUrl = process.env.WORDPRESS_URL || functions.config().wordpress?.url || 'https://www.entamade.jp';
    this.wordpressUsername = process.env.WORDPRESS_USERNAME || functions.config().wordpress?.username;
    this.wordpressPassword = process.env.WORDPRESS_PASSWORD || functions.config().wordpress?.password;
    this.openaiApiKey = process.env.OPENAI_API_KEY || functions.config().openai?.api_key;

    if (!this.openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    console.log('✅ BlogTool initialized successfully');

    this.openai = new OpenAI({
      apiKey: this.openaiApiKey
    });

    // XML-RPCクライアントの設定
    if (this.wordpressUrl) {
      const url = new URL(this.wordpressUrl);
      this.client = xmlrpc.createClient({
        host: url.hostname,
        port: url.port || 443,
        path: '/xmlrpc.php',
        secure: url.protocol === 'https:'
      });
    }

    this.blogId = 1;
  }

  // XMLエスケープ
  escapeXML(str) {
    if (!str) return '';
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }

  // SEOタイトル最適化
  optimizeTitle(title, category) {
    const year = new Date().getFullYear();
    const month = new Date().getMonth() + 1;
    const day = new Date().getDate();
    
    // 既に年が含まれていない場合のみ追加
    if (!title.includes(year.toString())) {
      title = `【${year}年${month}月】${title}`;
    }
    
    return title;
  }

  // SEOタグ最適化
  optimizeTags(tags, category) {
    const baseTags = tags || [];
    const categoryTags = {
      entertainment: ['エンタメ', '芸能', '話題', 'トレンド'],
      anime: ['アニメ', 'オタク', '声優', '新作'],
      game: ['ゲーム', 'eスポーツ', '攻略', 'レビュー'],
      movie: ['映画', '洋画', '邦画', 'Netflix'],
      music: ['音楽', 'J-POP', '新曲', 'ライブ'],
      tech: ['テクノロジー', 'IT', 'ガジェット', 'AI'],
      beauty: ['美容', 'コスメ', 'スキンケア', 'メイク'],
      food: ['グルメ', '料理', 'レシピ', '食べ物']
    };
    
    const additionalTags = categoryTags[category] || [];
    const year = new Date().getFullYear();
    
    return [...new Set([
      ...baseTags,
      ...additionalTags,
      '最新情報',
      `${year}年`,
      'まとめ',
      'ランキング',
      '注目'
    ])].slice(0, 15); // 最大15個のタグ
  }

  // コンテンツのサニタイズ
  sanitizeContent(content) {
    if (!content) return '';
    
    // 危険なタグを除去
    let safe = String(content)
      .replace(/<script[^>]*>.*?<\/script>/gi, '')
      .replace(/<iframe[^>]*>.*?<\/iframe>/gi, '')
      .replace(/<object[^>]*>.*?<\/object>/gi, '')
      .replace(/<embed[^>]*>/gi, '');
    
    // 文字数制限（安全のため1500文字に制限）
    if (safe.length > 1500) {
      safe = safe.substring(0, 1500) + '...';
    }
    
    return safe;
  }

  // XML-RPC呼び出し
  async callXmlRpc(methodName, params) {
    return new Promise((resolve, reject) => {
      this.client.methodCall(methodName, params, (error, value) => {
        if (error) {
          console.error(`XML-RPC Error calling ${methodName}:`, error);
          reject(error);
        } else {
          resolve(value);
        }
      });
    });
  }

  // WordPressに投稿
  async postToWordPress(title, content, options = {}) {
    try {
      console.log('📤 Posting to WordPress via XML-RPC...');
      
      // SEO最適化
      const seoTitle = this.optimizeTitle(title, options.category);
      const seoTags = this.optimizeTags(options.tags, options.category);
      
      // コンテンツ安全化
      const safeContent = this.sanitizeContent(content);
      
      const postData = {
        post_type: 'post',
        post_status: options.status || 'publish',
        post_title: this.escapeXML(seoTitle),
        post_content: safeContent,
        post_author: 1,
        comment_status: 'open',
        ping_status: 'open',
        sticky: false,
        post_format: 'standard',
        terms_names: {
          category: [options.category || 'エンタメ'],
          post_tag: seoTags
        }
      };

      if (options.excerpt) {
        postData.post_excerpt = this.escapeXML(options.excerpt);
      }

      const result = await this.callXmlRpc('wp.newPost', [
        this.blogId,
        this.wordpressUsername,
        this.wordpressPassword,
        postData
      ]);

      console.log('✅ WordPress post created with ID:', result);
      
      return {
        success: true,
        postId: result,
        url: `${this.wordpressUrl}/?p=${result}`,
        message: 'Post created successfully'
      };
      
    } catch (error) {
      console.error('❌ Error posting to WordPress:', error);
      return {
        success: false,
        error: error.message,
        message: 'Failed to create post'
      };
    }
  }

  // 記事生成（カテゴリー別）
  async generateArticle(category = 'entertainment', options = {}) {
    try {
      console.log(`🔍 Generating ${category} article...`);
      
      const templates = {
        entertainment: '最新のエンタメニュース、芸能人の話題、テレビ番組情報',
        anime: '注目のアニメ作品、声優情報、アニメイベント',
        game: '人気ゲームの攻略情報、新作ゲーム情報、eスポーツ',
        movie: '話題の映画レビュー、公開予定作品、映画館情報',
        music: '最新音楽ニュース、新曲リリース情報、ライブ情報',
        tech: 'IT業界ニュース、最新ガジェット、AI技術',
        beauty: '美容トレンド、スキンケア方法、メイクテクニック',
        food: 'グルメ情報、人気レストラン、レシピ紹介'
      };

      const topic = templates[category] || templates.entertainment;
      
      const prompt = `
${topic}について、最新の情報をまとめた魅力的なブログ記事を作成してください。

要件:
1. 1200-1500文字程度
2. HTML形式（h2, h3, p, ul, liタグを使用）
3. SEOを意識した構成
4. 読者の興味を引く内容
5. 具体的な情報を含める

構成:
- 導入部分（なぜ今この話題が重要か）
- メイントピック3つ（それぞれh2タグ）
- まとめ

HTML形式で出力してください。
`;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "あなたは人気ブログの記者です。SEOに強く、読者を引き付ける記事を書きます。"
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      });

      const content = completion.choices[0]?.message?.content || '';
      
      // タイトル生成
      const titlePrompt = `「${topic}」について、SEOに強い魅力的な記事タイトルを1つ生成してください。30-50文字程度。`;
      
      const titleCompletion = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "user",
            content: titlePrompt
          }
        ],
        temperature: 0.8,
        max_tokens: 100
      });

      const title = titleCompletion.choices[0]?.message?.content?.trim() || `${category}の最新情報`;

      console.log('✅ Article generated successfully');
      
      return {
        title: title,
        content: content,
        category: category,
        tags: this.optimizeTags([], category)
      };
      
    } catch (error) {
      console.error('❌ Error generating article:', error);
      throw error;
    }
  }

  // 商品レビュー記事生成（シンプル版）
  async generateProductReviewArticle(productData, keyword) {
    try {
      console.log('🔍 Generating product review article...');
      
      const prompt = `
商品レビュー記事を作成してください。

商品情報:
- タイトル: ${productData.title || '商品名'}
- 説明: ${productData.description || ''}
- 価格: ${productData.price || ''}
- カテゴリ: ${productData.category || ''}

キーワード: ${keyword || ''}

HTML形式で1200-1500文字の記事を作成してください。
構成：導入、特徴、メリット・デメリット、まとめ
`;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "あなたは商品レビューの専門家です。"
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      });

      const content = completion.choices[0]?.message?.content || '';
      const title = `${productData.title}の詳細レビュー【${new Date().getFullYear()}年最新】`;
      
      return {
        title: title,
        content: content,
        category: productData.category || 'レビュー',
        tags: [keyword, '商品レビュー', '最新']
      };
      
    } catch (error) {
      console.error('❌ Error generating product review:', error);
      // エラーでも基本的なコンテンツを返す
      return {
        title: productData.title || 'エラー',
        content: '<p>記事の生成中にエラーが発生しました。</p>',
        category: 'エラー',
        tags: []
      };
    }
  }
}

// BlogAutomationToolのエイリアス（互換性のため）
class BlogAutomationTool extends BlogTool {
  constructor() {
    super();
    console.log('BlogAutomationTool initialized (alias for BlogTool)');
  }
}

module.exports = BlogTool;
module.exports.BlogAutomationTool = BlogAutomationTool;